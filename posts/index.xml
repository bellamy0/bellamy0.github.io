<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bellamy</title>
    <link>https://bellamy0.gitHub.io/posts/</link>
    <description>Recent content in Posts on Bellamy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bellamy0.gitHub.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>javascript学习七——js面向对象基础</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%83/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%83/</guid>
      <description>20</description>
    </item>
    
    <item>
      <title>javascript学习六——Ajax</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E5%85%AD/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E5%85%AD/</guid>
      <description>1.服务器配置  安装nodejs与python并进行配置 在文件存放目录下使用cmd，输入命令http-server启动服务器，此时可根据网址localhost:8080/index.html访问（端口号与页面名称自己更改） Ajax不能以本地路径执行，必须进行服务器配置  2.Ajax基础  ajax读取文件：ajax(url,成功时执行的函数，失败时执行的函数);  ajax(&amp;quot;aaa.txt&amp;quot;,funtion(str){//str作用，获取服务器返回的内容 alert(str); },funtion(){ alert(&amp;quot;失败&amp;quot;); });   字符集编码：需要读的文件跟所有文件必须统一编码，否则易乱码 eval：将某个东西解析为js可以分析的内容（？）—可以解析json
 get请求：不填method默认为get
 通过网址传递
 被提交到网址后面，在url后加：username=xxx&amp;amp;password=xxx
 容量小（网址长度有限制）
  post请求：
 不通过网址传递
 不提交倒网址后面，只能通过network查看到
 容量大
   &amp;lt;head&amp;gt; &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;www...&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt; //action为提交地址 用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt;&amp;lt;br&amp;gt; //name与id相像，id给前台看，name数据传递给后台 密码：&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt; //submit用于提交表单 &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt;  3.Ajax中级  编写ajax 补：全局变量是window上一个属性window.a  a(存在形式变量)、window.a(存在形式属性)——未定义的变量会报错、未定义的属性只会undefined
 防止缓存：在文件名后加&amp;rdquo;a.txt?t=&amp;ldquo;+new Date().</description>
    </item>
    
    <item>
      <title>javascript学习五——事件基础</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%BA%94/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%BA%94/</guid>
      <description>1.event事件和事件冒泡  document：代表整个页面  document.onclick=function(){};
 body:需要撑起来才有内容
 event.clientX/ev.clientX：获取鼠标的横坐标(两种有兼容性的问题)
 event.clientY/ev.clientY：获取鼠标的纵坐标
 ev事件处理函数有参数，是系统传的
 解决event/ev兼容性
  某个var对象or整个document.onclick=funtion(ev){ var oEvent=ev||event; alert(oEvent.clientX+&amp;quot;,&amp;quot;+oEvent.clientY); };   事件冒泡——典型事件流：事件会一直顺着层级传，直到最外层document
 取消冒泡的应用：下拉菜单，点击外面时菜单消失
  oEvent.cancelBubble=true;
2.鼠标事件  onmousemove:鼠标移动时发生  某个var对象or整个document.onmousemove=function(ev){ var oEvent=ev||event; …… };   scrolltop：（？）  3.键盘事件  onkeydown：按键按下  某个var对象or整个document.onkeydown=funtion(ev){ var oEvent=ev||event; alert(oEvent.keyCode); };   onkeyup：按键抬起 eg：按键控制div移动 ctrlkey、shiftkey、altkey：判断ctrl/shift/alt是否被按下 eg：提交留言在输入框的对象中加onkeydown  if(oEvent.keyCode==13 &amp;amp;&amp;amp; oEvent.ctrlKey){ //判断是否是ctrl和回车 };  4.默认行为  当用户点右键弹出菜单时的事件：  某个var对象or整个document.</description>
    </item>
    
    <item>
      <title>win10的ubuntu踩坑记录</title>
      <link>https://bellamy0.gitHub.io/2020/ubuntu%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/ubuntu%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description> 1.Linux需要root user操作时： 使用命令su 输入密码进入root
2.Ubuntu下使用vim编写运行c，c++程序：  sudo su ：转换为超级用户 vim hello.c/hello.cpp、vi hello创建hello.c并打开vim 键入i或a，进入输入模式 编写程序 按ESC键退出输入模式 :wq输入该命令保存并退出 编译hello.c/hello.cpp：编译后均生成a.out文件  对于c程序：用gcc hello.c 便可以编译 对于c++程序：用g++ hello.cpp可编译  输入指令./a.out运行程序 在terminal上显示“hello world”即成功  </description>
    </item>
    
    <item>
      <title>javascript学习四——运动基础</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E5%9B%9B/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E5%9B%9B/</guid>
      <description>1.div的运动  运动中的bug解决：  不会停止——清除timer 速度取到某些值无法停止——用&amp;gt;=判断而非== 到达位置点击还会再运动：clearInterval是clear了下一次的——用if else 重复点击速度加快——在前面先清除所有Interval   &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; #div1{width:200; height:200px; background:red; position:absolute; top:50px; left:0px;} &amp;lt;/style&amp;gt; &amp;lt;script&amp;gt; var timer=null; function startMove(){ var oDiv=document.getElementById(&amp;quot;div1&amp;quot;); //clearInterval是防止开启多个定时器 clearInterval(timer); timer=setInterval(function(){ if(oDiv.offsetLeft&amp;gt;=300){ clearInterval(timer); }else{ oDiv.style.left=oDiv.offsetLeft+10+&amp;quot;px&amp;quot;; } },30); }; &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input id=&amp;quot;btn1&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;开始运动&amp;quot; onclick=&amp;quot;startMove()&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;div1&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;  2.运动框架  开始运动时关闭已有定时器 把运动和停止隔开（if/else） “分享到”实例：  &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; #div1{width:150px; height:200px; background:green; position:absolute; left:-150;} #div1 span{position:absolut; width:20px; height:60px;line-height:20px; background:blue; tight:-20px; top:70px;} &amp;lt;/style&amp;gt; &amp;lt;script&amp;gt; window.</description>
    </item>
    
    <item>
      <title>javascript学习三——DOM</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%89/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%89/</guid>
      <description>1.节点  DOM——&amp;gt;document
 节点
 文本节点：无标签包裹的 元素节点：标签中的  获取子节点：
 childNotes：获取某标签下所有节点 children：获取某标签下元素节点 oUl.children
 只算第一层  父节点：
 查找父节点：parentNode  父节点应用：隐藏列表项
  &amp;lt;head&amp;gt; &amp;lt;script&amp;gt; window.onload=function(){ var aA=document.getElementsByTypeName(&amp;quot;a&amp;quot;); for(var i=0;i&amp;lt;aA.lenght;i++){ aA[i].onclick=function(){ this.parentNode.display=hidden; }; }; }; &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;a&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;b&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;c&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt;   offsetParent：获取元素在页面上的实际位置 firstChild/lastChild：获取收尾子节点 nextSibling/previousSibling：兄弟节点  2.操作元素的方式：  用点操作 用方括号操作 DOM：（一般不用）  setAttribute(&amp;ldquo;属性名&amp;rdquo;,&amp;ldquo;值&amp;rdquo;)：设置某属性的值 getAttribute（&amp;rdquo;属性名&amp;rdquo;）：获取某属性的值 removeAttribute(&amp;ldquo;属性名&amp;rdquo;)：删除某属性的值   &amp;lt;head&amp;gt; &amp;lt;script&amp;gt; window.onload=function(){ var oTxt=document.</description>
    </item>
    
    <item>
      <title>javascript学习二——定时器</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%BA%8C/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%BA%8C/</guid>
      <description>1.打开定时器 1.1 setInterval  用法：setInterval(函数名，时间ms) 作用：每个一段时间执行一次函数 返回值：打开的那个定时器  1.2 setTimeout  用法：setTimeout(函数名，时间ms) 作用：只执行一次，且时间为多久后消失  2.关闭定时器 2.1 clearInterval  用法：clearInterval(需要关闭的定时器) ，此处括号的内容需setInterval返回  2.2 clearTimeout  用法：同上  3.打开与关闭实例 &amp;lt;script&amp;gt; window.onload=function(){ var oBtn1=document.getElementId(&amp;quot;btn1&amp;quot;); var oBtn2=document.getElementId(&amp;quot;btn2&amp;quot;); //设置打开按钮 oBtn1.onclick=function(){ //timer用于获取当前打开的是哪个定时器 timer=setInterval(function(){ alert(&amp;quot;a&amp;quot;); },1000); }; //设置关闭按钮 oBtn2.onclick=function(){ clearInterval(timer); }; }; &amp;lt;/script&amp;gt;  4.Date对象 4.1 getHours  作用：获取当前时间  4.2 getMinutes  作用：获取当前分钟  4.3 getSecond  作用：获取当前秒  4.4 getFullYear  作用：获取年份  4.5 getMonth  作用：获取月份，从0开始，需要+1  4.</description>
    </item>
    
    <item>
      <title>OpenGL踩坑记录（vs2017）</title>
      <link>https://bellamy0.gitHub.io/2020/opengl%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/opengl%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>一、opengl的环境配置  引用自：https://www.cnblogs.com/flylinmu/p/7823019.html
 新建opengl项目：
 空项目-&amp;gt;项目-&amp;gt;管理NuGet程序包-&amp;gt;浏览-&amp;gt;搜索nupengl-&amp;gt;两个都安装
 作用：用别人的项目时会提示“找不到xxx.h/xxx.lib”或“x86与x64冲突”或者各种link错误，是由于工程中使用了第三方库，二又不能找到。这时在C/C++ →常规-&amp;gt;附加包含目录添加各种头文件路径，链接器 → 常规 → 附加库目录 添加各种lib的路径，然后还需要在链接器 → 输入 → 附加依赖项填写工程中使用的lib名称。
  而NuGet则是帮助你管理Package的。
 不用第三方库时新建opengl项目：
 visual C++ -&amp;gt; windows桌面 -&amp;gt;windows桌面向导-&amp;gt;确定-&amp;gt;windows应用程序-&amp;gt;空文件勾选，去掉预编译标头与SDL检查 选了控制台应用程序可能会造成链接失败（exe找不到文件）   二 、OpenGL程序的初始设置（vs） 1.1 更改项目Windows SDK版本  VS 2017提示无法打开包括文件:“Windows.h”:No such file or director的解决办法 首先看有没有安装windows sdk，如果没有安装，请打开visual Stdio Installer，然后选择修改，勾上最新版的windows SDK
 在项目上右键——属性——配置属性——常规——Windows SDK版本——改为10.0.17763.0（或刚刚安装的版本
 测试一下是否可以包含，如果还不行。在上面属性页的VC++目录-&amp;gt;包含目录中打开，查看um文件夹是否在里面，如果不在的话添加到包含目录。windows.h文件就在这个目录C:\Program Files (x86)\Windows Kits\10\Include\10.0.17763.0\um\windows.h
  1.2 更改项目调试信息格式  又为 vs的“错误 D8016 “/ZI”和“/Gy-”命令行选项不兼容”问题解决办法
 接上条，配置属性——C/C++——常规——调试信息格式——改为无</description>
    </item>
    
    <item>
      <title>javascript学习一——基础语法</title>
      <link>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/javascript%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>一、JS基础语法知识 1. JavaScript组成：  ECMAscript
 DOM：文档
 BOM：浏览器
  2. 属性：  type=&amp;lsquo;text/javascript&amp;rsquo;说明标签内的文本格式 src引入外部js文件  &amp;lt;script src=&amp;quot;demo.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
3. 注意点：  可以有多个&amp;lt;script&amp;gt;标签，但js是按代码顺序执行的 一个标签只能做一件事情（要么引入，要么直接在里面写代码） js代码需要有分号！  4. js中的输出方法：  alert()：弹出一个警告框 document.write()：在页面上输出内容  如果括号内有html标签会自动解析，不会以文本形式输出  console.log()：在控制台上输入内容  一般用于代码调试，不影响用户（招聘简介放在）   5、常量  数据类型：  数字： 类型：number 例子：100、-20、3.14 布尔值： 类型：Boolean 例子：true、false 字符串： 类型：所有单引号或双引号的内容（都一样） 例子：“100”，“hello” 复合/引用数据类型： 特殊数据类型：null、undefined（没有初始化）、NaN   6、变量  声明变量关键字：var  7、变量弱引用  定义：变量赋值是什么类型，就是什么类型 注意：不建议改变变量的数据类型  8、三目运算符 num % 2 = 0 ?</description>
    </item>
    
    <item>
      <title>CSS进阶学习一</title>
      <link>https://bellamy0.gitHub.io/2020/css%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description> 一、b标签与i标签  strong与b、em与i的相同点：都可以实现相同效果（加粗与斜体），但前者是语义化的（有含义的），后者不具备语义化（无含义）
 b与i存在的意义：简化选择器的操作，可以直接区分，而不用额外添加class
  二、引用相关标签 </description>
    </item>
    
    <item>
      <title>Css阶段实战作业—企业首页</title>
      <link>https://bellamy0.gitHub.io/2020/css%E9%98%B6%E6%AE%B5%E5%AE%9E%E6%88%98%E4%BD%9C%E4%B8%9A%E4%BC%81%E4%B8%9A%E9%A6%96%E9%A1%B5/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E9%98%B6%E6%AE%B5%E5%AE%9E%E6%88%98%E4%BD%9C%E4%B8%9A%E4%BC%81%E4%B8%9A%E9%A6%96%E9%A1%B5/</guid>
      <description>页面效果请到：
https://bellamy0.github.io/Basic-learning-of-CSS-One/htmlExercise/index.html
(本页面仅为css页面效果展示，无js交互)
源码（html部分） &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./css/common.css&amp;quot; id=&amp;quot;&amp;quot;&amp;gt; &amp;lt;style&amp;gt; #banner{position: relative;} #banner .banner_list{ width: 100%; height: 469px; position: relative;} #banner .banner_list li{width: 100%; height: 100%; background:center 0 no-repeat; position:absolute; top: 0;left: 0; opacity: 0; z-index: 1; } #banner .banner_list li.active{opacity: 1;z-index: 10;} #banner .banner_list li a{display: block; width:100%; height: 100%;} #banner .banner_btn{width:100%; position: absolute; bottom: 19px;z-index: 20; font-size: 0; text-align: center; } #banner .</description>
    </item>
    
    <item>
      <title>上传HTML项目到Github</title>
      <link>https://bellamy0.gitHub.io/2020/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>上传HTML项目到Github 1.注册github
2.下载git gui
3.在磁盘创建一个用来存放git文件的文件夹（在git gui第一次运行时可以自动选择文件夹生成）
4.将自己的项目文件夹拷贝到存放git文件的文件夹下
5.打开git gui
6.按顺序点击下方12345，在提示输入id与密码时输入
7.如果是初次使用，会弹框提示你没有登录用户名，要打开命令行进行登录，命令行输入： git config –global username mygithub_name git config –global password mygithub_password
资源里面点击 git Bash ，在命令行里面输入你的账号和密码，按照上面的两行格式，然后关闭就可以了。
8.提交成功会显示 success 然后在 github 官网就能看到提交成功的项目了。
9.进入github的该项目，点击settings，下拉找到GitHub Pages，按照图片进行设置
10.该页面地址为https://你的github用户名.github.io/项目名/文件夹名/文件名.html
ps：项目名不是文件夹名称，是在github设置的名称</description>
    </item>
    
    <item>
      <title>上传HTML项目到Github</title>
      <link>https://bellamy0.gitHub.io/2020/%E4%B8%8A%E4%BC%A0html%E9%A1%B9%E7%9B%AE%E5%88%B0github/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/%E4%B8%8A%E4%BC%A0html%E9%A1%B9%E7%9B%AE%E5%88%B0github/</guid>
      <description>上传HTML项目到Github 1.注册github
2.下载git gui
3.在磁盘创建一个用来存放git文件的文件夹（在git gui第一次运行时可以自动选择文件夹生成）
4.将自己的项目文件夹拷贝到存放git文件的文件夹下
5.打开git gui
6.按顺序点击下方12345，在提示输入id与密码时输入
7.如果是初次使用，会弹框提示你没有登录用户名，要打开命令行进行登录，命令行输入： git config –global username mygithub_name git config –global password mygithub_password
资源里面点击 git Bash ，在命令行里面输入你的账号和密码，按照上面的两行格式，然后关闭就可以了。
8.提交成功会显示 success 然后在 github 官网就能看到提交成功的项目了。
9.进入github的该项目，点击settings，下拉找到GitHub Pages，按照图片进行设置
10.该页面地址为https://你的github用户名.github.io/项目名/文件夹名/文件名.html
ps：项目名不是文件夹名称，是在github设置的名称</description>
    </item>
    
    <item>
      <title>解决Github图片显示问题</title>
      <link>https://bellamy0.gitHub.io/2020/%E8%A7%A3%E5%86%B3github%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/%E8%A7%A3%E5%86%B3github%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</guid>
      <description>解决Github图片显示问题 一.问题： GitHub中图片无法正常显示，甚至连头像也会裂开
按f12打开控制台查看错误原因
Failed to load resource: net::ERR_CERT_COMMON_NAME_INVALID
有博主认为：实际上，可以认为，ERR_CERT_COMMON_NAME_INVALID就是用一个错误的域名访问了某个节点的https资源。导致这个错误的原因，基本是：
 dns污染 host设置错误 官方更新了dns，但是dns缓存没有被更新，导致错误解析。  二.解决办法： 主要思路就是使用本地hosts文件对网站进行域名解析，一般的DNS问题都可以通过修改hosts文件来解决，github的CDN域名被污染问题也不例外，同样可以通过修改hosts文件解决，将域名解析直接指向IP地址来绕过DNS的解析，以此解决污染问题。
2.1 找到URL 打开GitHub带有任意挂掉图片的网页，使用元素选择器（Ctrl+Shift+C），放在显示不了的图片上，或者在挂掉的图片上右键-检查元素，找到该元素的标签，复制其URL（src引号里的内容）
https://avatars0.githubusercontent.com/u/44628130?s=460&amp;amp;amp;v=4
2.2 获取ip地址 之后打开ipaddress 在搜索框搜索二级域名avatars0.githubusercontent.com ，随后能看到该域名的ip address，写下博客时为：199.232.28.133
随后我们用该ip地址与域名映射起来
2.3修改hosts 用sublime打开C:\Windows\System32\drivers\etc\hosts
第一次更改时先在末尾添加：
# GitHub Start 192.30.253.112 github.com 192.30.253.119 gist.github.com 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.184.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.184.133 avatars0.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 151.101.184.133 avatars3.githubusercontent.com 151.101.184.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 151.101.184.133 avatars8.githubusercontent.com # GitHub End  非第一次修改则直接找查询的域名，更改对应域名的旧ip为新ip</description>
    </item>
    
    <item>
      <title>CSS学习四</title>
      <link>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E5%9B%9B/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E5%9B%9B/</guid>
      <description>一.float浮动  文档流：文档流是文档中可显示对象在排列时所占用的位置
 float特性：加浮动元素（提高当前内容的层次），会脱离文档流（脱离body），会延迟父容器靠左或靠右排列，如果之前已经有浮动元素，会挨着浮动的元素进行排列
 float取值：left、right、none（默认） float注意点 ：  只会影响后面的元素 ① 内容默认提升半层（图文混排效果）
 宽由内容决定（类似内联）（块是由父容器决定） 换行排列 针对内联也适用（不常用） 不方便居中
   &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; //此时黄色在上，红色在下，按文档流中的块排列 body{ border:1px black solid;} #box1{ width:100px; height:100px; background:yellow; } #box2{ width:200px; height:200px; background:red; } //此时黄色会浮在红色上方，依靠着由红色撑起来的父容器，向左排列 body{ border:1px black solid;} #box1{ width:100px; height:100px; background:yellow; float:left; } #box2{ width:200px; height:200px; background:red; } //此时两者都浮动，文档流（body）部分无内容，两者并排 body{ border:1px black solid;} #box1{ width:100px; height:100px; background:yellow; float:left; } #box2{ width:200px; height:200px; background:red; float:left; } //① 黄色依然在红色上方，区别是蓝色此时在红色底部 body{ border:1px black solid;} #box1{ width:100px; height:100px; background:yellow;} #box2{ width:200px; height:200px; background:red; float:left; } #box3{ width:300px; height:300px; background:blue; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;box1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;box2&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;box3&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;   清除浮动</description>
    </item>
    
    <item>
      <title>CSS学习三</title>
      <link>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%B8%89/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%B8%89/</guid>
      <description>一.CSS样式的继承  文字相关样式能被继承
 布局相关样式不能被继承（默认不能，但是可以设置继承属性inherit）
  &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; //div标签的属性能被用于子标签p上——继承 div{ width:300px; height:300px; color:red; border:1px; } //布局继承 p{ border:inherit; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;这是一个段落&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;  二.CSS的优先级  相同样式：后面的优先级更高（不建议）
 内部样式与外部样式： 后引入的样式优先级高 单一样式优先级：style行间&amp;gt;id&amp;gt;class&amp;gt;tag&amp;gt;*&amp;gt;继承
 !important ：提升样式优先级（不建议使用）
 标签+类与单类：标签+类&amp;gt;单类⑤
 同一样式下群组与单一：不分优先级，按顺序，靠后的优先级高 层次优先级：  权重比较：累加数值之比 约分比较   &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; #elem{ color:red; } .box{ color: blue; } div{ color:blue; } *{ color:red; } //important的使用 #elem{ color:red; !important; } //⑤ div.</description>
    </item>
    
    <item>
      <title>CSS学习二</title>
      <link>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%BA%8C/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%BA%8C/</guid>
      <description>一.ID选择器  css：#elem{}
 html：id=&amp;quot;elem&amp;quot;
  &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; #div1{ background: red;} #div2{ background: blue;} &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;div1&amp;quot;&amp;gt; 这是一个块 &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;quot;div2&amp;quot;&amp;gt; 这是另一个块 &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;   注意：
 在一个页面中ID值是唯一的，不可复用（所以id用的很少） 命名的规范：由字母、下划线、中划线组成（第一位不能是数字） 快捷创建 容器名+#+id+tab
 小驼峰写法&amp;amp;短线写法&amp;amp;下划线写法
   二.CLASS选择器  css：.elem{}
 html：class=&amp;quot;elem&amp;quot;
  &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; .box{ background: red;} .content{ font-size:30px;} //④.启用下面时会过滤掉div中的仅使p生效 //p.box{ background:blue; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt; 这是一个块 &amp;lt;/div&amp;gt; //①.可复用 &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt; 这又是一个块 &amp;lt;/div&amp;gt; //②.</description>
    </item>
    
    <item>
      <title>CSS学习一</title>
      <link>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/css%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>一.CSS基础语法  格式： 选择器{属性1：值1；属性2：值2}
 基本样式：width、height、background-color 长度单位：px（像素）、%（相对于外容器的百分比） css注释：/* 注释内容 */
 形式  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; //&amp;lt;style&amp;gt; 内写css，此处为设置下方的div div{ width:100px;height:100px;background-color:red } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  二.css样式的引入方式  内联样式：style属性
 内部样式：style标签（可以复用标签，更优，看起来更简洁）
 形式
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; //&amp;lt;style&amp;gt; 内写css，此处为设置下方的div,内部样式 div{ width:100px;height:100px;background-color:red } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; //内联样式 &amp;lt;div style=&amp;quot;width:100px;height:100px;background-color:red&amp;quot;&amp;gt; 这是一个块 &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   外部样式：引入css文件</description>
    </item>
    
    <item>
      <title>html学习</title>
      <link>https://bellamy0.gitHub.io/2020/html%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2020/html%E5%AD%A6%E4%B9%A0/</guid>
      <description>一.VSCode编辑器 快捷键的使用 ctrl + a:全选
ctrl + z、ctrl + y: 撤销、前进
shift + end：从头选中一行
shift + home：从尾部选中一行
shift + alt + ↓：快速复制一行
alt + ↑或↓：快速移动一行
单词+tab：快速形成标签&amp;lt;单词&amp;gt;
!+tab:快速创建html初始代码
ctrl+/:快速生成/删除注释
shift+alt+a：快速生成/删除注释
二.html初始代码 &amp;lt;!DOCTYPE html&amp;gt; //文档声明：html文件 &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; //html文件最外层标签：初始为英文网站(lang=&amp;quot;zh-CN&amp;quot;表示中文) &amp;lt;head&amp;gt; //头部（通常为输入网址的那一栏） &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; //元信息：编写网页中的赋值信息，此处为采用国际编码 &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; //头部处的标题 &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; //页面中的所有内容 &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;`  三.标题与段落 1.标题  双标签（&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;……&amp;lt;h6&amp;gt;&amp;lt;/h6&amp;gt;)
 一个页面中只能有一个h1，其余标题无限制。
 h5、h6在开发中不常用
  2.段落  双标签（&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;）
  3. 文本修饰标签  &amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;:加粗
 &amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;:斜体</description>
    </item>
    
    <item>
      <title>Hugo学习指南</title>
      <link>https://bellamy0.gitHub.io/2019/hugo%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2019/hugo%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</guid>
      <description>一、安装hugo 准备  文件操作
 创建一个新文件夹，D:\Hugo 创建一个新文件夹，D:\Hugo\bin 创建一个新文件夹，D:\Hugo\Sites  下载hugo
 在浏览器中打开 https://github.com/spf13/hugo/releases。 当前的版本是 hugo_0.55.6_Windows-64bit.zip。 下载那个 ZIP 文件，并保存到 D:\Hugo\bin 文件夹中。 解压之后得到三个文件hugo.exe、LICENSE、README.md 确保 hugo.exe 文件在 D:\Hugo\bin 文件夹。（如果你没有在D:\Hugo\bin 请把它移动去） 把 hugo.exe 可执行文件添加到你的 PATH路径中。把hugo添加到path中的操作：
我的电脑邮件右键属性，在高级里面，选择环境变量，在系统变量里面找到path。双击打开path编辑，新建路径输入D:\hugo\bin（作者这里是D:\hugo\bin，其他的自己改路径）
   二、部署hugo  验证：打开cmd，用hugo help 验证，有提示输出则为安装成功 输入cmd命令
D:\Hugo\Sites&amp;gt; hugo new site 你的昵称.org
 建网站
 用cmd输入(bellamy0处改为你自己站点的名字):
D:\Hugo\Sites&amp;gt; hugo new site bellamy0.org
这样就会在sites目录里面生成bellamy0.org的文件夹用来存放网站文件等。 创建about页面，输入：
hugo new post/first.md
 创建第一篇文章，输入：
hugo new about.md
 打开 post/first.md 编辑blog内容。</description>
    </item>
    
    <item>
      <title>MarkDown语法学习</title>
      <link>https://bellamy0.gitHub.io/2019/markdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bellamy0.gitHub.io/2019/markdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</guid>
      <description>1.标题 1.1 方法一: 在前面加对应个数#
# 第一级标题
## 第二级标题
### 第三级标题
#### 第四级标题
##### 第五级标题
###### 第六级标题
注意：在最后一个#后必须有空格！
1.2 方法二: 在第一/二级标题下分别加=====/&amp;mdash;&amp;mdash;&amp;ndash;
 效果
  第一级标题 第二级标题 第三级标题 第四级标题 第五级标题 第六级标题 2.段落格式 2.1 段落换行方法一：末尾添加两个以上空格+回车
2.2 段落换行方法二：段落之间空一行
2.3 斜体：
*斜体文本*
_斜体文本_
 效果：斜体文本
  2.4 粗体：
**粗体文本**
__粗体文本__
 效果：粗体文本
  2.5 粗斜体：
***粗斜体文本***
___粗斜体文本___
 效果：粗斜体文本
  2.6 分割线：在一行中用三个以上的星号、减号、底线来建立分割线、行内不能有其他东西（除空格）
***
---
___
 效果：  2.7 删除线：</description>
    </item>
    
  </channel>
</rss>